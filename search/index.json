[{"content":"go env variables these are some goroot location of sdk gopath for version greater than 1.13 i.e using modules downloaded source code is stored $gopath pkg mod compliled binaries bin we can change this behaviour $gobin defaults $home gobin where all compiled will be if set run without specifying full path list related environment commands creates go.mod file compiles place binary places current directory executes main package contains multiple files packages way organize also helps reusability every starts ex same name placed dependency management collection packagesnested pacakages may exist forms module there go.sum present root import dependencies direct does not have internally its imported as indirect projects checksum versions used validate none got modified alias different names blank just init function initialize global executed when initialized downloads project adds it makes sure reflect vice versa listed bundles vendor folder reduces downloading paths pacakge within use replace package.useful semantic imports versionning v.{major}.{minor}.{patch} automatically picks up latest from minor patch particular major append end notes semi colon requried at statements var keywordvery explicit declared assigned zero value given type variable declaration declaraion assignment block types inferred initialization right hand side short-hand note that only inside reassigning cannot must any unused cause compilation error local one which defined or level scope lifetime until blocks outside functions they start capital alphabet exported other small constants once const values known compile time so declare return scoped caps then out accessed four int string characterint32 bool datatypes basic integers int64 signed 64 bits bytes uint64 unsigned 2^64 numbers int8 int16 int32 similarly uint unintptr hold pointer size float64 float32 precision based operations complex64 complex128 byte uint8 between 255 represent ascii rune unicode points superset assign number character existence utf-8 stores point either slice array usually represented format therefore according varies 1-4 boolean true false more you keyword dereferencing access pointed by lot things done coupling both \u0026amp default struct collectin data fields empty structs partial created while creating new need provide field required seperation possible create pointers directly two ways print tags add meta encoding decoding into nested equality equal needs compatible work map func supported check copy passed save memory whenever index arrays means no concept pointing first element iterate normal loop range fixed unlike like underlying length no.of elements capacity max internal `func appendslice []type elems ...type []type` increase exceeds slices copies on assigning referenced `copy` perform copydst src int` `nil` dictionary hashmap search insert retrieve delete o1 apart keys nil reference refers maps safe concurrent locks iota similar enums higher order can. pass parameter variableanonymous typesdeclare signature supports closures consider lives another below example inner even though returned vairable unique each called closure immediate invocation definition invoke variadic parameters params ints how call vary methods attaching let us emulate object oriented behavior functionality attached them very calling objects receivers decrease usage able method setters reciever begin but public loops over channels keywords ignore second left programming language golang label program conditional else shorthand ternary statement those switch break cases after case match defer deferring activity cleanup activities open close often forget before logic defers reverse inline anonymous itself implemented stack panics interfaces interface signatures achieve duck typing attributes reason why because mock hence testing becomes easier imlicitly implements above dog imlements animal well implment implement accepting help writing modular decoupled accept generic vs passing accepts argument embedded instance has goroutines lightweight threads own execution context concurrently concurency achieved running goroutine simple adding invoking asynchronously next execute immediately wait complete spawns exits get read abour queues communications synchrounization manage act pipes actions send channel recieve","date":"2021-10-23","description":"Reference - Golang","permalink":"https://rahilrehan.github.io/posts/0005-ref-golang/","tags":null,"title":"Reference - Golang"},{"content":"what is software development engineering defined as application of systematic disciplined quantifiable approach operation maintenance ieee\u0026rsquos standard glossary devlopment not just writing code its about clean understandable maintainable there are many other things involved process like requiremnt gathering planning desinging testing releasing later maintaining these aspects also very important martin fowler said “any fool can write that computer understand good programmers humans understand.” types engineers sdesoftware engineer common term used represent umbrella professions frontend folks who deal visual components product backend internal system providing abstraction form apis which use fullstack combination both above roles architect designer makes sure systems design sdettester one test whole for bugs acceptance critereas some companies part so this role played by sde itself ex tdd operations deals market deployment stuff sre site reliability work on teams teamsrelease devops acts middleman between devolopment team it\u0026rsquos more culture may have at all tests end-to-end ensure adheres business requirements performance load regression even though cases pass has be performant should able handle etc evaluate metrics models waterfall model steps requirement collection customer desgin accordingly implementation build verification verify if meets initial requriements maintain project we assume collected before almost never case iterative implement jump 1st stepand repeat until satisfied ^^ problem from solved agile it way says incrementing short cycles intra-teamcross-team communication key reduce conflicts future lean development[copied wiki] eliminate waste do add anything required amplify learning gather requirments constantly share knowledge among decide late possible conter-intuitive nah don\u0026rsquot commit early deliver asap faster feedback cycle repeats empower optimize always think how works scrum broken down into chunks each chunk divided such completed 2-4 weeks timeframe complete chuck called again tasks people pickup number sprint gives balance velocity shouldn\u0026rsquot too higheasy or lowhard completedspillovers put next events estimation splitting daily standups updateswhat done yesterday will today any blockers member talks three points retrospection after went well improved must discussed actions items planned kanban board style todo-list contains lanes todo backlog doing review added according need trello popular switching microservice architecture services increase responsible service owns hence related become new now-a-days","date":"2021-10-18","description":"Software Development Lifecycle and different approaches","permalink":"https://rahilrehan.github.io/posts/0004-notes-sdlc/","tags":null,"title":"Notes - Software Development Lifecycle"},{"content":"basics spring has lot of modules start.spring.io lists many which you can configure boot is useful build restfull web services it makes developing applications easy by auto configuring default components opinionated framework fat jar also includes tomcat better solution if want deploy on cloud platforms dependency injection assume mail sender example where we have mailsender type smtp popm or mockmail interface defines common functionality implement mock class **problem object creation will be like ** private new smtpmailsender popmmailsender mockmailsender need hardcode while creating automate this add @component annotation any implements @autowired when how does work application starts all beans gets setup annotations at top level whose created stored context examples @restcontroller running create objects variables for already from are assigned current i.e those injected into these hence works methodssetters constructors getters methods. multiple problem two classes same both using confused choose between one use camel-case variable names resemble name ex param @componentmockmail extra @primary bean get preference @qualifier setter constructor etc prefer @resource @inject similar but very powerful so specializations @controller @service @repository @configuration @springbootapplicationscanbasepackageclasses {default.class abc.class} scans through package puts others what import there cannot config methods return external must @bean configuration used @value access .properties .yaml files file takes more over internal configapplication.properties **profiles **a behave differently different environments profiles dev test prod provide application.properties spring.profiles.active book particular just @profileenvname accepts bool envname @conditional include exclude based arbitrary conditions @conditionalonclass onproperty onmissingbean ..etc presence property @conditionalonproperty try again some method still returns cached only caching not happen always","date":"2021-10-09","description":"Dependecy injection concepts in Java Spring","permalink":"https://rahilrehan.github.io/posts/0001-dependency-injection/","tags":null,"title":"Java/Spring - Dependency injection"},{"content":"microservices concepts using java technologies we can have multiple services running each service instances as well product browse products rest api order places inventory checks if is available notification discovery they need discover other cannot particularly specify are referring different needs be generic one means refer use spring cloud netflix eureka centralized configuration change config variable code make compile re-deploy it again of same then becomes hard take down those solution server store all variables files git repository or local whenever there these will new now refresh runtime you call some actuator which that its central automatic storing secrets vault usernames passwords database links etc hidden from install our system via docker starting start save starter it\u0026rsquos enough just connect made message broker might depend on may effect like rabbitmq broadcast subscribed has changes must installed host runs port infra gateway application handle endpoints receives uri request clients redirects client correct acts endpoint distributer attach load balancers authentication monitoring rete limiting also taken care here should present sercuring authorization run keycloak machine at token relay done by authorizing send this respective resilience asynchronously communicates go so resilient requestinterceptor when speaking not sent because mechanism for passing auth get append bearer header definition watch outages network latencies temporarily stop until starts functioning normally resilience4g hystrixnetflix maintained right event driven architecture placed broadcasts binders listen events output notifications input receive distributed tracing pattern allows us track requests microservice give unique id along journey trace but circuit breaker between spawns thread workaround keep sametraceableexecuterservice sleuth zipkin logging logs over place manner first library log4j logback beware security issues while elk stack popular elastic search logstash kibana tcp phases configure logstash.conf ftp filter searchsearch engine implementation used own index visualize query data end do unless monoliths best most cases","date":"2021-10-09","description":"Some important beginner microservices concepts for higher level overview","permalink":"https://rahilrehan.github.io/posts/0002-microservices-concepts/","tags":null,"title":"Java/Spring - Microservices Concepts"},{"content":"art of good night\u0026rsquos sleep is knowing you will not get woken by support call piece mind from being able confidently change your software always moving market nic jackson code can have undesirable effect on other parts tests helps making process changing future easy testing pyramid unit testingbottom service integrationmiddle ui end-endtop test cases should decrease as go bottom top just write first use expected function run fail minimal for make pass same different values sure all are passing base refactor both features scenarios given feature break it down each user story example when search endpoint would like receive list kittens 1st scenario invalid query no criteria then bad request message so number uncle bobs rules law may production until written failing second more than sufficient compiling third currently naming my convention testnamereturnsomethingwhensomethinghappens testdoghandlerreturnsbadrequestwhennosearchcriteriaissent aaa format arrange act assert try follow this pattern clean concepts stub fake class that comes preprogrammed return it’s injected into under give absolute control over what’s tested input typical database connection allows mimic any without having real mock be examined after finished its interactions ask whether method called or how many times mocks classes side effects need e.g sends emails data another external learn mocking wrapper something which hides implementation some internally uses","date":"2021-10-09","description":"My understanding of TDD and how I do it.","permalink":"https://rahilrehan.github.io/posts/0003-tdd-notes/","tags":null,"title":"Notes - Test Driven Development"}]