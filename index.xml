<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rahil Rehan</title>
    <link>https://rahilrehan.github.io/</link>
    <description>Recent content on Rahil Rehan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rahilrehan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
    <title>Microservices Concepts - Java</title>
    <link>https://rahilrehan.github.io/post/microservices-concepts-java/</link>
    <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
    <author>Rahil Rehan</author>
    <guid>https://rahilrehan.github.io/post/microservices-concepts-java/</guid>
    <description>
        &lt;h2 id=&#34;microservices-concepts-using-java-technologies&#34;&gt;
    &lt;a href=&#34;#microservices-concepts-using-java-technologies&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Microservices Concepts (Using Java technologies)
&lt;/h2&gt;
&lt;p&gt;In microservices we can have multiple services running, and each service can have multiple instances as well.&lt;/p&gt;
&lt;p&gt;Product service: browse products using rest api
Order service: places order
Inventory service: checks if product is available in inventory
Notification service:&lt;/p&gt;
&lt;h3 id=&#34;discovery-service&#34;&gt;
    &lt;a href=&#34;#discovery-service&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Discovery Service
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each service can have multiple instances running and they need to discover each other.&lt;/li&gt;
&lt;li&gt;As we cannot particularly specify the service as they are multiple instances, referring to different service needs to be generic.&lt;/li&gt;
&lt;li&gt;Referring to one service means to refer to available services.&lt;/li&gt;
&lt;li&gt;In java we can use spring cloud netflix eureka&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;centralized-configuration&#34;&gt;
    &lt;a href=&#34;#centralized-configuration&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Centralized configuration
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If we change a config variable in code, we need to make change to code, compile and re-deploy it again.&lt;/li&gt;
&lt;li&gt;If we have multiple instances of same service then it becomes hard as we need to take down those services as well .&lt;/li&gt;
&lt;li&gt;Solution: Use a centralized config server&lt;/li&gt;
&lt;li&gt;Store all config variables of different services in different files in a git repository or local store.&lt;/li&gt;
&lt;li&gt;Whenever there is change in these files, config server will have new config variables.&lt;/li&gt;
&lt;li&gt;Now to refresh all the config variables in runtime, you need to call to some api actuator which will refresh the config variables in that service and all its instances.&lt;/li&gt;
&lt;li&gt;In Java Central config server with automatic refresh&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;storing-secrets-in-vault&#34;&gt;
    &lt;a href=&#34;#storing-secrets-in-vault&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Storing secrets in vault
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;usernames, passwords, database links etc have to be hidden from configuration&lt;/li&gt;
&lt;li&gt;We have to install vault in our system or via docker, starting vault will start a server as well.&lt;/li&gt;
&lt;li&gt;Save all the secrets in vault.&lt;/li&gt;
&lt;li&gt;In Java we can use Spring starter vault config to use secrets in our code.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s enough just to connect to vault server and all the secrets are made available to the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;message-broker&#34;&gt;
    &lt;a href=&#34;#message-broker&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Message Broker
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One service might depend on other service, change in config variable of one service may effect the other.&lt;/li&gt;
&lt;li&gt;We can use message broker like RabbitMQ, which broadcast that there is some change in config to other services which are subscribed to that service which has changes.&lt;/li&gt;
&lt;li&gt;RabbitMQ must be installed on the host system and runs on some host and port.&lt;/li&gt;
&lt;li&gt;RabbitMQ in infra?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gateway&#34;&gt;
    &lt;a href=&#34;#api-gateway&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    API gateway
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We may have different services in our application.&lt;/li&gt;
&lt;li&gt;Each service may handle different endpoints.&lt;/li&gt;
&lt;li&gt;API gateway, receives a uri request from clients.&lt;/li&gt;
&lt;li&gt;It redirects the client to correct service.&lt;/li&gt;
&lt;li&gt;It acts like a central endpoint distributer.&lt;/li&gt;
&lt;li&gt;We can attach load balancers to each service as well.&lt;/li&gt;
&lt;li&gt;Authentication, monitoring and rete limiting can also be taken care here.&lt;/li&gt;
&lt;li&gt;API gateway is also a service and should be present in discovery service.&lt;/li&gt;
&lt;li&gt;In Java, spring cloud gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sercuring-server-with-authentication-and-authorization&#34;&gt;
    &lt;a href=&#34;#sercuring-server-with-authentication-and-authorization&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Sercuring server with authentication and authorization
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run keycloak on host machine, it will start at some port&lt;/li&gt;
&lt;li&gt;token relay:
&lt;ul&gt;
&lt;li&gt;If authentication is done by token, using keycloak as we will be authorizing at api gateway, we need to send this token to the respective gateway as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Java, use Keycloak&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resilience&#34;&gt;
    &lt;a href=&#34;#resilience&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Resilience
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Order service asynchronously communicates with Inventory service&lt;/li&gt;
&lt;li&gt;Inventory service can go down, so we need to make it resilient&lt;/li&gt;
&lt;li&gt;RequestInterceptor:
&lt;ul&gt;
&lt;li&gt;When one service is speaking to other, authentication token is not sent. Because, it is not token relay mechanism.&lt;/li&gt;
&lt;li&gt;For passing auth token, we need to get the token and append it to authorization bearer in the request header and then send the request to service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Definition: watch for service outages and network latencies and temporarily stop the service until service starts functioning normally again .&lt;/li&gt;
&lt;li&gt;In Java, Resilience4g or hystrix(netflix - not maintained right now)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;event-driven-microservices-architecture&#34;&gt;
    &lt;a href=&#34;#event-driven-microservices-architecture&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Event driven microservices architecture
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When order is placed, order service broadcasts message to notification service via RabbitMQ.&lt;/li&gt;
&lt;li&gt;Use rabbitMQ binders to listen for events
&lt;ul&gt;
&lt;li&gt;output binders: to send notifications&lt;/li&gt;
&lt;li&gt;input binders: to receive notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;distributed-tracing&#34;&gt;
    &lt;a href=&#34;#distributed-tracing&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Distributed tracing
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;microservices pattern  allows us to track the requests from one microservice to other.&lt;/li&gt;
&lt;li&gt;We give unique id along the journey of the request&lt;/li&gt;
&lt;li&gt;each request has same trace id along its journey&lt;/li&gt;
&lt;li&gt;but when there is a circuit breaker in between, trace id changes as circuit breaker spawns a new thread. But there is a workaround to keep our trace id same(traceableExecuterService in Java)&lt;/li&gt;
&lt;li&gt;In java, we use spring cloud sleuth and zipkin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;centralized-logging&#34;&gt;
    &lt;a href=&#34;#centralized-logging&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Centralized logging
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;logs are all over different services&lt;/li&gt;
&lt;li&gt;place all logs in a centralized manner&lt;/li&gt;
&lt;li&gt;First we need to use some logging library at each service like log4J or logback&lt;/li&gt;
&lt;li&gt;beware of security issues while logging&lt;/li&gt;
&lt;li&gt;In java (ELK stack is popular -&amp;gt; elastic search, logstash and kibana)
&lt;ul&gt;
&lt;li&gt;logstash: application services send logs to logstash over tcp. these logs are then sent from logstash to elastic search.
&lt;ul&gt;
&lt;li&gt;phases:	(configure in logstash.conf)
&lt;ul&gt;
&lt;li&gt;input: from services using tcp or ftp or rabbitMQ&lt;/li&gt;
&lt;li&gt;filter: filter logs&lt;/li&gt;
&lt;li&gt;output: send to elastic search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elastic search(search engine implementation in java): Used to store logs
&lt;ul&gt;
&lt;li&gt;Each service has its own index in elastic search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kibana: Visualize, Query and filter elastic search data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;end&#34;&gt;
    &lt;a href=&#34;#end&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    End
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Do not use microservice architecture unless there is a need. Monoliths are best in most cases.&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
  </channel>
</rss>
