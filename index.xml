<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rahil Rehan</title>
    <link>https://rahilrehan.github.io/</link>
    <description>Recent content on Rahil Rehan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rahilrehan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
    <title>Software Development Lifecycle</title>
    <link>https://rahilrehan.github.io/post/software-engineering-lifecycle/</link>
    <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
    <author>Rahil Rehan</author>
    <guid>https://rahilrehan.github.io/post/software-engineering-lifecycle/</guid>
    <description>
        &lt;h2 id=&#34;what-is-software-developmentengineering&#34;&gt;
    &lt;a href=&#34;#what-is-software-developmentengineering&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    What is Software Development/Engineering?
&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Software engineering is defined as the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software.&lt;/em&gt; - IEEE&amp;rsquo;s Standard Glossary&lt;/p&gt;
&lt;p&gt;Software devlopment is not just writing code, its about writing clean, understandable and maintainable code. And there are many other things involved in software development process. Things like requiremnt gathering, planning, desinging, testing, releasing and later maintaining. These aspects are also very important!&lt;/p&gt;
&lt;p&gt;Like Martin Fowler said,  “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”&lt;/p&gt;
&lt;h3 id=&#34;types-of-software-engineers&#34;&gt;
    &lt;a href=&#34;#types-of-software-engineers&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Types of software engineers:
&lt;/h3&gt;
&lt;p&gt;SDE(Software development engineer) - A common term used to represent an umbrella of professions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend engineers: Folks who deal with visual components of the product.&lt;/li&gt;
&lt;li&gt;Backend engineers: Folks who deal with internal system components providing an abstraction in form of APIs which frontend engineers can use.&lt;/li&gt;
&lt;li&gt;Fullstack engineers: Combination of both of the above roles.&lt;/li&gt;
&lt;li&gt;System Architect: The system designer, makes sure the systems design is good .&lt;/li&gt;
&lt;li&gt;SDET(tester): One who test the whole system for bugs and acceptance critereas.
&lt;ul&gt;
&lt;li&gt;In some companies testing is part of development process, so this role is played by SDE itself. Ex: in TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operations engineer: Deals with releasing the product to market. Deployment and stuff.&lt;/li&gt;
&lt;li&gt;SRE - Site reliability engineers: Folks who work both on development teams and operations teams(release teams)&lt;/li&gt;
&lt;li&gt;Devops engineer: Acts as a middleman between devolopment teams and operations team. It&amp;rsquo;s more of a culture. So, some companies may not have this role at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testing&#34;&gt;
    &lt;a href=&#34;#testing&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Testing
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance tests: end-to-end tests to ensure the whole system adheres to business requirements.&lt;/li&gt;
&lt;li&gt;Performance, Load, Regression testing: Even though all the test cases pass, system has to be performant, should be able to handle load etc. These tests evaluate above metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;software-development-models&#34;&gt;
    &lt;a href=&#34;#software-development-models&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Software Development Models:
&lt;/h2&gt;
&lt;h3 id=&#34;waterfall-model&#34;&gt;
    &lt;a href=&#34;#waterfall-model&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Waterfall model:
&lt;/h3&gt;
&lt;p&gt;Steps in waterfall model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requirement collection (customer requirement)&lt;/li&gt;
&lt;li&gt;Desgin (design system accordingly)&lt;/li&gt;
&lt;li&gt;Implementation (build system)&lt;/li&gt;
&lt;li&gt;Verification (verify if the product meets the initial requriements)&lt;/li&gt;
&lt;li&gt;Maintenance (Maintain the project)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this model we assume that all requirements are collected before implementation (which is almost never the case!)&lt;/p&gt;
&lt;h3 id=&#34;iterative-model&#34;&gt;
    &lt;a href=&#34;#iterative-model&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Iterative Model:
&lt;/h3&gt;
&lt;p&gt;Steps in iterative model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requirement collection&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Implement&lt;/li&gt;
&lt;li&gt;Verify&lt;/li&gt;
&lt;li&gt;Jump to 1st step(and repeat)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Repeat this until the customer is satisfied ^^&lt;/li&gt;
&lt;li&gt;Problem from waterfall model is solved!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;agile&#34;&gt;
    &lt;a href=&#34;#agile&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Agile!
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Agile itself is not a model, it is an umbrella term.&lt;/li&gt;
&lt;li&gt;Agile way says,
&lt;ul&gt;
&lt;li&gt;we have to build software in iterative, incrementing, short cycles.&lt;/li&gt;
&lt;li&gt;Intra-team(cross-team) communication is key to reduce conflicts in future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-models-of-agile&#34;&gt;
    &lt;a href=&#34;#some-models-of-agile&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Some models of agile:
&lt;/h3&gt;
&lt;h4 id=&#34;lean-developmentcopied-from-wiki&#34;&gt;
    &lt;a href=&#34;#lean-developmentcopied-from-wiki&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Lean development:[copied from wiki]
&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Eliminate waste : do not add anything which is not required.&lt;/li&gt;
&lt;li&gt;Amplify learning: gather requirments constantly, share knowledge among teams.&lt;/li&gt;
&lt;li&gt;Decide as late as possible: conter-intuitive? nah, just don&amp;rsquo;t commit early.&lt;/li&gt;
&lt;li&gt;Deliver ASAP: the faster the deliver, the faster the feedback and faster the cycle repeats.&lt;/li&gt;
&lt;li&gt;Empower the team: Important.&lt;/li&gt;
&lt;li&gt;Optimize the whole: Always think about how the system works on the whole.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;scrum&#34;&gt;
    &lt;a href=&#34;#scrum&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    SCRUM!!
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The whole project is broken down into chunks.&lt;/li&gt;
&lt;li&gt;Each chunk is divided such that it can be completed in 2-4 weeks.&lt;/li&gt;
&lt;li&gt;And this timeframe to complete a chuck is called &lt;code&gt;sprint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each chunk of work is again divided into tasks which people can pickup and complete.&lt;/li&gt;
&lt;li&gt;Number of tasks completed in a sprint gives teams &lt;code&gt;velocity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Balance the velocity, it shouldn&amp;rsquo;t be too high(easy tasks) or too low(hard tasks).&lt;/li&gt;
&lt;li&gt;The tasks which are not completed(spillovers) are again put into next sprint.&lt;/li&gt;
&lt;li&gt;Scrum events:
&lt;ul&gt;
&lt;li&gt;Planning - Initial planning of whole project&lt;/li&gt;
&lt;li&gt;Estimation - Splitting into chunks&lt;/li&gt;
&lt;li&gt;Daily standups - Daily updates(what was done yesterday, what will be done today, any blockers?) - each team member talks about these three points in short.&lt;/li&gt;
&lt;li&gt;Retrospection - After each sprint, what went well and what can be improved must be discussed among team. And actions items have to be planned accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kanban&#34;&gt;
    &lt;a href=&#34;#kanban&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Kanban
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A board style todo-list.&lt;/li&gt;
&lt;li&gt;Contains lanes
&lt;ul&gt;
&lt;li&gt;TODO/Backlog&lt;/li&gt;
&lt;li&gt;Doing&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More lanes can be added according to teams need and style&lt;/li&gt;
&lt;li&gt;Ex: Trello&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;devops&#34;&gt;
    &lt;a href=&#34;#devops&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Devops!
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Popular!&lt;/li&gt;
&lt;li&gt;People are switching to microservice architecture.&lt;/li&gt;
&lt;li&gt;As number of services increase in microservice architecture, each team which is responsible for a service owns the service. Hence, team should also be involved in operations related tasks!&lt;/li&gt;
&lt;li&gt;Devops itself has become a new role now-a-days. It was just a culture before&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
    <item>
    <title>Dependency Injection - Spring</title>
    <link>https://rahilrehan.github.io/post/dependecy-injection-spring/</link>
    <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
    <author>Rahil Rehan</author>
    <guid>https://rahilrehan.github.io/post/dependecy-injection-spring/</guid>
    <description>
        &lt;h3 id=&#34;basics&#34;&gt;
    &lt;a href=&#34;#basics&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Basics
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spring has lot of modules&lt;/li&gt;
&lt;li&gt;start.spring.io lists many spring modules which you can configure&lt;/li&gt;
&lt;li&gt;spring boot is useful to build RESTfull web services. It makes developing spring applications easy by auto configuring default components. It is opinionated framework&lt;/li&gt;
&lt;li&gt;fat jar -&amp;gt; also includes tomcat. better solution if you want to deploy on cloud platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-injection&#34;&gt;
    &lt;a href=&#34;#dependency-injection&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Dependency Injection
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assume mail sender example, where we can have mailSender of type SMTP, POPM or MockMail.&lt;/li&gt;
&lt;li&gt;We can have an interface MailSender which defines the common functionality and we implement the interface in SMTP, POPM or Mock class.&lt;/li&gt;
&lt;li&gt;**Problem: object creation will be like: **
&lt;ul&gt;
&lt;li&gt;private MailSender  = new SMTPMailSender()&lt;/li&gt;
&lt;li&gt;private MailSender  = new POPMMailSender()&lt;/li&gt;
&lt;li&gt;private MailSender  = new MockMailSender()&lt;/li&gt;
&lt;li&gt;we need to hardcode the type while creating object&lt;/li&gt;
&lt;li&gt;can we automate this?&lt;/li&gt;
&lt;li&gt;Add @Component annotation to any class which implements MailSender&lt;/li&gt;
&lt;li&gt;Add @Autowired annotation when creating object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how does it work:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;When application starts all the beans gets setup
&lt;ul&gt;
&lt;li&gt;Beans: annotations at top level, whose object will be created and stored in &lt;em&gt;Application Context&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Beans examples: @Component, @RestController&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When application is running and when we create objects variables for which we have annotations like @Autowired. Objects which were already created from application context are assigned to current variables.&lt;/li&gt;
&lt;li&gt;i.e those objects from application context are injected into these variables and hence dependency injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Autowired also works on methods(setters, constructors, getters, any methods..)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple beans problem:&lt;/strong&gt; when we create two classes from same interface and add @component annotation to both classes, and create object using interface using @autowired annotation, spring will be confused to choose between beans
&lt;ul&gt;
&lt;li&gt;one solution is to use camel-case variable names while creating objects which resemble the name of the class you want (ex: smtpMailSender)&lt;/li&gt;
&lt;li&gt;you can also add name param to @component -&amp;gt; @component(&amp;ldquo;mockMail&amp;rdquo;), and create object using the name mockMail&lt;/li&gt;
&lt;li&gt;use extra @primary annotation, the bean which has this will get preference&lt;/li&gt;
&lt;li&gt;you can also use @qualifier annotation to class, and also use @qualifier in setter or constructor, &amp;hellip;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prefer constructor injection&lt;/li&gt;
&lt;li&gt;@resource and @inject are similar to @autowired, but @autowired is very powerful, so use @autowired&lt;/li&gt;
&lt;li&gt;Specializations of @component annotations
&lt;ul&gt;
&lt;li&gt;@Controller&lt;/li&gt;
&lt;li&gt;@Service&lt;/li&gt;
&lt;li&gt;@Repository&lt;/li&gt;
&lt;li&gt;@Configuration&lt;/li&gt;
&lt;li&gt;@SpringBootApplication(scanBasePackageClasses = {default.class, abc.class}) - scans through the package and puts any dependency injection components into application context&lt;/li&gt;
&lt;li&gt;@RestController&lt;/li&gt;
&lt;li&gt;&amp;hellip;.. many others&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what if you import a dependency and you have to create object from there, you cannot add @component annotation dependency package
&lt;ul&gt;
&lt;li&gt;Create a new config class, which has methods to return objects from the external dependency&lt;/li&gt;
&lt;li&gt;the new config class must have @Configuration annotation&lt;/li&gt;
&lt;li&gt;and methods must have @Bean configuration&lt;/li&gt;
&lt;li&gt;names of the methods can be used for object variable names&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use @Value annotation to access variables from .properties or .yaml files&lt;/li&gt;
&lt;li&gt;an external config file takes more preference over internal config(application.properties)&lt;/li&gt;
&lt;li&gt;**Profiles: **A spring application can be configure to behave differently in different environments using profiles
&lt;ul&gt;
&lt;li&gt;ex environments: dev, test, prod&lt;/li&gt;
&lt;li&gt;provide in application.properties:
&lt;ul&gt;
&lt;li&gt;spring.profiles.active: book, dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;you can also use particular beans in particular environments!
&lt;ul&gt;
&lt;li&gt;just	use @Profile(&amp;ldquo;envName&amp;rdquo;), can accepts bool, !envName&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Conditional annotation, include or exclude beans based on arbitrary conditions
&lt;ul&gt;
&lt;li&gt;@ConditionalOnClass, OnProperty, OnMissingBean ..etc&lt;/li&gt;
&lt;li&gt;configure bean based on presence of application property =&amp;gt; @ConditionalOnProperty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In @Configuration classes, when we try to create same bean again from some method, spring still returns the cached bean only.
&lt;ul&gt;
&lt;li&gt;Caching does not happen when we use @Component annotation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Always use @Configuration Classes&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
    <item>
    <title>Microservices Concepts - Java</title>
    <link>https://rahilrehan.github.io/post/microservices-concepts-java/</link>
    <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
    <author>Rahil Rehan</author>
    <guid>https://rahilrehan.github.io/post/microservices-concepts-java/</guid>
    <description>
        &lt;h2 id=&#34;microservices-concepts-using-java-technologies&#34;&gt;
    &lt;a href=&#34;#microservices-concepts-using-java-technologies&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Microservices Concepts (Using Java technologies)
&lt;/h2&gt;
&lt;p&gt;In microservices we can have multiple services running, and each service can have multiple instances as well.&lt;/p&gt;
&lt;p&gt;Product service: browse products using rest api
Order service: places order
Inventory service: checks if product is available in inventory
Notification service:&lt;/p&gt;
&lt;h3 id=&#34;discovery-service&#34;&gt;
    &lt;a href=&#34;#discovery-service&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Discovery Service
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each service can have multiple instances running and they need to discover each other.&lt;/li&gt;
&lt;li&gt;As we cannot particularly specify the service as they are multiple instances, referring to different service needs to be generic.&lt;/li&gt;
&lt;li&gt;Referring to one service means to refer to available services.&lt;/li&gt;
&lt;li&gt;In java we can use spring cloud netflix eureka&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;centralized-configuration&#34;&gt;
    &lt;a href=&#34;#centralized-configuration&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Centralized configuration
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If we change a config variable in code, we need to make change to code, compile and re-deploy it again.&lt;/li&gt;
&lt;li&gt;If we have multiple instances of same service then it becomes hard as we need to take down those services as well .&lt;/li&gt;
&lt;li&gt;Solution: Use a centralized config server&lt;/li&gt;
&lt;li&gt;Store all config variables of different services in different files in a git repository or local store.&lt;/li&gt;
&lt;li&gt;Whenever there is change in these files, config server will have new config variables.&lt;/li&gt;
&lt;li&gt;Now to refresh all the config variables in runtime, you need to call to some api actuator which will refresh the config variables in that service and all its instances.&lt;/li&gt;
&lt;li&gt;In Java Central config server with automatic refresh&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;storing-secrets-in-vault&#34;&gt;
    &lt;a href=&#34;#storing-secrets-in-vault&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Storing secrets in vault
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;usernames, passwords, database links etc have to be hidden from configuration&lt;/li&gt;
&lt;li&gt;We have to install vault in our system or via docker, starting vault will start a server as well.&lt;/li&gt;
&lt;li&gt;Save all the secrets in vault.&lt;/li&gt;
&lt;li&gt;In Java we can use Spring starter vault config to use secrets in our code.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s enough just to connect to vault server and all the secrets are made available to the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;message-broker&#34;&gt;
    &lt;a href=&#34;#message-broker&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Message Broker
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One service might depend on other service, change in config variable of one service may effect the other.&lt;/li&gt;
&lt;li&gt;We can use message broker like RabbitMQ, which broadcast that there is some change in config to other services which are subscribed to that service which has changes.&lt;/li&gt;
&lt;li&gt;RabbitMQ must be installed on the host system and runs on some host and port.&lt;/li&gt;
&lt;li&gt;RabbitMQ in infra?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gateway&#34;&gt;
    &lt;a href=&#34;#api-gateway&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    API gateway
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We may have different services in our application.&lt;/li&gt;
&lt;li&gt;Each service may handle different endpoints.&lt;/li&gt;
&lt;li&gt;API gateway, receives a uri request from clients.&lt;/li&gt;
&lt;li&gt;It redirects the client to correct service.&lt;/li&gt;
&lt;li&gt;It acts like a central endpoint distributer.&lt;/li&gt;
&lt;li&gt;We can attach load balancers to each service as well.&lt;/li&gt;
&lt;li&gt;Authentication, monitoring and rete limiting can also be taken care here.&lt;/li&gt;
&lt;li&gt;API gateway is also a service and should be present in discovery service.&lt;/li&gt;
&lt;li&gt;In Java, spring cloud gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sercuring-server-with-authentication-and-authorization&#34;&gt;
    &lt;a href=&#34;#sercuring-server-with-authentication-and-authorization&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Sercuring server with authentication and authorization
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run keycloak on host machine, it will start at some port&lt;/li&gt;
&lt;li&gt;token relay:
&lt;ul&gt;
&lt;li&gt;If authentication is done by token, using keycloak as we will be authorizing at api gateway, we need to send this token to the respective gateway as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Java, use Keycloak&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resilience&#34;&gt;
    &lt;a href=&#34;#resilience&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Resilience
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Order service asynchronously communicates with Inventory service&lt;/li&gt;
&lt;li&gt;Inventory service can go down, so we need to make it resilient&lt;/li&gt;
&lt;li&gt;RequestInterceptor:
&lt;ul&gt;
&lt;li&gt;When one service is speaking to other, authentication token is not sent. Because, it is not token relay mechanism.&lt;/li&gt;
&lt;li&gt;For passing auth token, we need to get the token and append it to authorization bearer in the request header and then send the request to service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Definition: watch for service outages and network latencies and temporarily stop the service until service starts functioning normally again .&lt;/li&gt;
&lt;li&gt;In Java, Resilience4g or hystrix(netflix - not maintained right now)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;event-driven-microservices-architecture&#34;&gt;
    &lt;a href=&#34;#event-driven-microservices-architecture&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Event driven microservices architecture
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When order is placed, order service broadcasts message to notification service via RabbitMQ.&lt;/li&gt;
&lt;li&gt;Use rabbitMQ binders to listen for events
&lt;ul&gt;
&lt;li&gt;output binders: to send notifications&lt;/li&gt;
&lt;li&gt;input binders: to receive notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;distributed-tracing&#34;&gt;
    &lt;a href=&#34;#distributed-tracing&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Distributed tracing
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;microservices pattern  allows us to track the requests from one microservice to other.&lt;/li&gt;
&lt;li&gt;We give unique id along the journey of the request&lt;/li&gt;
&lt;li&gt;each request has same trace id along its journey&lt;/li&gt;
&lt;li&gt;but when there is a circuit breaker in between, trace id changes as circuit breaker spawns a new thread. But there is a workaround to keep our trace id same(traceableExecuterService in Java)&lt;/li&gt;
&lt;li&gt;In java, we use spring cloud sleuth and zipkin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;centralized-logging&#34;&gt;
    &lt;a href=&#34;#centralized-logging&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Centralized logging
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;logs are all over different services&lt;/li&gt;
&lt;li&gt;place all logs in a centralized manner&lt;/li&gt;
&lt;li&gt;First we need to use some logging library at each service like log4J or logback&lt;/li&gt;
&lt;li&gt;beware of security issues while logging&lt;/li&gt;
&lt;li&gt;In java (ELK stack is popular -&amp;gt; elastic search, logstash and kibana)
&lt;ul&gt;
&lt;li&gt;logstash: application services send logs to logstash over tcp. these logs are then sent from logstash to elastic search.
&lt;ul&gt;
&lt;li&gt;phases:	(configure in logstash.conf)
&lt;ul&gt;
&lt;li&gt;input: from services using tcp or ftp or rabbitMQ&lt;/li&gt;
&lt;li&gt;filter: filter logs&lt;/li&gt;
&lt;li&gt;output: send to elastic search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elastic search(search engine implementation in java): Used to store logs
&lt;ul&gt;
&lt;li&gt;Each service has its own index in elastic search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kibana: Visualize, Query and filter elastic search data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;end&#34;&gt;
    &lt;a href=&#34;#end&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    End
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Do not use microservice architecture unless there is a need. Monoliths are best in most cases.&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
    <item>
    <title>Test Driven Development - Notes</title>
    <link>https://rahilrehan.github.io/post/test-driven-development-notes/</link>
    <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
    <author>Rahil Rehan</author>
    <guid>https://rahilrehan.github.io/post/test-driven-development-notes/</guid>
    <description>
        &lt;ul&gt;
&lt;li&gt;The art of a good night&amp;rsquo;s sleep is knowing you will not get woken by a support call and the piece of mind from being able to confidently change your software in an always moving market. - Nic Jackson&lt;/li&gt;
&lt;li&gt;change in code can have undesirable effect on the other parts, tests helps in making the process of changing code in future easy&lt;/li&gt;
&lt;li&gt;testing pyramid: unit testing(bottom), service/integration(middle), ui/end-end(top)
&lt;ul&gt;
&lt;li&gt;test cases should decrease as you go from bottom to top&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;approach&#34;&gt;
    &lt;a href=&#34;#approach&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Approach
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just write test first (use expected function)&lt;/li&gt;
&lt;li&gt;Run and fail the test&lt;/li&gt;
&lt;li&gt;Write minimal code for the test to run and fail&lt;/li&gt;
&lt;li&gt;Write minimal code to make test pass&lt;/li&gt;
&lt;li&gt;Test same function with different values&lt;/li&gt;
&lt;li&gt;Make sure all tests are passing&lt;/li&gt;
&lt;li&gt;Tests for base cases&lt;/li&gt;
&lt;li&gt;Refactor both code and tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;features-and-scenarios&#34;&gt;
    &lt;a href=&#34;#features-and-scenarios&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Features and scenarios
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Given a feature, break it down to scenarios. Each feature is a user story
&lt;ul&gt;
&lt;li&gt;Example Feature: As a user when I call the search endpoint, I would like to receive a list of kittens&lt;/li&gt;
&lt;li&gt;Break it down to scenarios
&lt;ul&gt;
&lt;li&gt;1st Scenario: Invalid query&lt;br&gt;
Given I have no search criteria&lt;br&gt;
When I call the search endpoint&lt;br&gt;
Then I should receive a bad request message&lt;/li&gt;
&lt;li&gt;and so&amp;hellip; on number of different scenarios&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;uncle-bobs-rules-of-unit-tests&#34;&gt;
    &lt;a href=&#34;#uncle-bobs-rules-of-unit-tests&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Uncle bobs, rules of unit tests
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First law: You may not write production code until you have written a failing unit test&lt;/li&gt;
&lt;li&gt;Second law: You may not write more of a unit test than is sufficient to fail, and not compiling is failing&lt;/li&gt;
&lt;li&gt;Third law: You may not write more production code than is sufficient to pass the currently failing test&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naming&#34;&gt;
    &lt;a href=&#34;#naming&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    Naming
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;my convention: TestNameReturnSomethingWhenSomethingHappens
&lt;ul&gt;
&lt;li&gt;example:  TestDogHandlerReturnsBadRequestWhenNoSearchCriteriaIsSent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aaa-format-for-testing---arrange-act-assert&#34;&gt;
    &lt;a href=&#34;#aaa-format-for-testing---arrange-act-assert&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    AAA format for testing - Arrange, Act, Assert
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I always try to follow this pattern for clean code&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CalculatorTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sumOfTwoNumbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//Arrange
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calculator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;//Act
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;//Assert
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Equal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;concepts&#34;&gt;
    &lt;a href=&#34;#concepts&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    concepts
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation&#34;&gt;Idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect&#34;&gt;Side effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;stub&lt;/strong&gt; is a fake class that comes with preprogrammed return values. It’s injected into the class under test to give you absolute control over what’s being tested as input. A typical stub is a database connection that allows you to mimic any scenario without having a real database.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;mock&lt;/strong&gt; is a fake class that can be examined after the test is finished for its interactions with the class under test. For example, you can ask it whether a method was called or how many times it was called. Typical mocks are classes with side effects that need to be examined, e.g. a class that sends emails or sends data to another external service.&lt;/li&gt;
&lt;li&gt;Learn mocking - &lt;a href=&#34;https://semaphoreci.com/community/tutorials/stubbing-and-mocking-with-mockito-2-and-junit&#34;&gt;https://semaphoreci.com/community/tutorials/stubbing-and-mocking-with-mockito-2-and-junit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wrapper: something which hides implementation of some other code or internally uses other code.&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
  </channel>
</rss>
